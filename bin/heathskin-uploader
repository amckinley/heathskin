#!/usr/bin/env python

import threading
import Queue
import argparse
import logging

from os.path import expanduser
from requests.exceptions import ConnectionError
from heathskin.tail_thread import TailThread
from heathskin.log_uploader import LogUploader
from heathskin.exceptions import UploaderException


def run(args):
    log_fmt = "%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s"

    if args.debug:
        level = logging.DEBUG
    else:
        level = logging.INFO

    logging.basicConfig(level=level, format=log_fmt)

    # stop spam from requests module
    logging.getLogger("requests").setLevel(logging.WARNING)
    logger = logging.getLogger()

    uploader = LogUploader(args.log_server, args.username, args.password)

    stop_event = threading.Event()

    def progress(stop_event):
        while True:
            if stop_event.wait(4):
                logger.info("Progress thread exiting")
                return

            logger.info("Uploaded a total of %d lines", uploader.line_count)

    def shutdown(t_thread, p_thread):
        stop_event.set()
        if t_thread:
            t_thread.join()
        if p_thread:
            p_thread.join()

    t = None
    progress_thread = None

    try:
        uploader.start()

        # start thread for tracking uploader progress
        progress_thread = threading.Thread(target=progress, args=(stop_event,))
        progress_thread.start()

        if args.use_replay_log:
            logger.info("Starting data reply from %s", args.use_replay_log)
            fake_lines = open(args.use_replay_log)
            for l in fake_lines.readlines():
                if l.rstrip() and not l.startswith('#'):
                    uploader.upload_line(l)
            logger.info("Finished with fake data")
            shutdown(t, progress_thread)
            return

        output_queue = Queue.Queue(maxsize=100)

        # start thread for tailing the log
        t = TailThread(args.log_file_path, stop_event, output_queue)
        t.start()

        while True:
            try:
                line = output_queue.get_nowait()
            except Queue.Empty:
                continue
            uploader.upload_line(line)

    except KeyboardInterrupt:
        logger.error("Got SIGINT, shutting down")
        shutdown(t, progress_thread)

    except ConnectionError:
        logger.error("heathskin server at %s is unreachable", args.log_server)
        shutdown(t, progress_thread)

    except UploaderException as e:
        logger.error(e)
        shutdown(t, progress_thread)

    except Exception as e:
        logger.exception("Unexpected exception")
        shutdown(t, progress_thread)

    shutdown(t, progress_thread)


def main(args):
    run(args)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Track some skins')
    parser.add_argument('--use_replay_log', default=False)
    default_log_location = expanduser("~/Library/Logs/Unity/Player.log")
    parser.add_argument('--log_file_path', default=default_log_location)
    parser.add_argument('--debug', default=False, action='store_true')
    parser.add_argument('--log_server', default='127.0.0.1:3000')
    parser.add_argument('--username', required=True)
    parser.add_argument('--password', required=True)

    args = parser.parse_args()

    main(args)
