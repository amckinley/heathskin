#!/usr/bin/env python

import threading
import Queue
import argparse
import logging
from itertools import islice
import time
import json
import sys

from os.path import expanduser, exists
from requests.exceptions import ConnectionError
from heathskin.tail_thread import TailThread
from heathskin.log_uploader import LogUploader
from heathskin.exceptions import UploaderException


def read_from_queue_until_empty(q, max_read=1000):
    logger = logging.getLogger()
    results = []
    while True:
        if len(results) >= max_read:
            logger.warn("fetched more than %d lines; pushing anyway", max_read)
            return results
        try:
            results.append(q.get_nowait())
        except Queue.Empty:
            return results


def run(args):
    log_fmt = "%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s"

    if args.debug:
        level = logging.DEBUG
    else:
        level = logging.INFO

    logging.basicConfig(level=level, format=log_fmt)

    # stop spam from requests module
    logging.getLogger("requests").setLevel(logging.WARNING)
    logger = logging.getLogger()

    # if the config exists, use those values, except where overriden by
    # arguments passed at the command line
    if exists(args.config):
        try:
            with open(args.config) as f:
                config = json.load(f)
                for k, v in config.items():
                    if getattr(args, k) is None:
                        setattr(args, k, v)
        except:
            logger.error("Failed to parse config file at %s", args.config)
            sys.exit(1)

    if not args.log_file_path:
        default_log_location = expanduser("~/Library/Logs/Unity/Player.log")
        args.log_file_path = default_log_location

    uploader = LogUploader(args.server, args.username, args.password)

    stop_event = threading.Event()

    def progress(stop_event):
        while True:
            if stop_event.wait(4):
                logger.info("Progress thread exiting")
                return

            logger.info(
                "Uploaded a total of %d lines, skipped %d",
                uploader.uploaded_count, uploader.skipped_count)

    def shutdown(t_thread, p_thread):
        stop_event.set()
        if t_thread:
            t_thread.join()
        if p_thread:
            p_thread.join()

    t = None
    progress_thread = None

    try:
        uploader.start()

        # start thread for tracking uploader progress
        progress_thread = threading.Thread(target=progress, args=(stop_event,))
        progress_thread.start()

        if args.use_replay_log:
            max_read = 1000
            logger.info("Starting data reply from %s", args.use_replay_log)

            with open(args.use_replay_log) as f:
                while True:
                    lines_chunk = list(islice(f, max_read))
                    if not lines_chunk:
                        break

                    uncommented_lines = [
                        l.rstrip()
                        for l in lines_chunk
                        if not l.startswith('#')]
                    uploader.upload_lines(uncommented_lines)

            logger.info("Finished with fake data")
            shutdown(t, progress_thread)
            return

        output_queue = Queue.Queue(maxsize=100)

        # start thread for tailing the log
        t = TailThread(args.log_file_path, stop_event, output_queue)
        t.start()

        while True and not t.stopped:
            lines = read_from_queue_until_empty(output_queue)
            if not lines:
                time.sleep(0.1)
                continue

            logger.debug("fetched lines %d; pushing", len(lines))
            uploader.upload_lines(lines)

    except KeyboardInterrupt:
        logger.error("Got SIGINT, shutting down")
        shutdown(t, progress_thread)

    except ConnectionError:
        logger.error("heathskin server at %s is unreachable", args.log_server)
        shutdown(t, progress_thread)

    except UploaderException as e:
        logger.error(e)
        shutdown(t, progress_thread)

    except Exception as e:
        logger.exception("Unexpected exception")
        shutdown(t, progress_thread)

    shutdown(t, progress_thread)


def main(args):
    sys.exit(run(args))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Track some skins')
    default_config_location = expanduser("~/.heathskin")
    parser.add_argument(
        '-f',
        '--config',
        default=default_config_location,
        help='location of the heathskin uploader config file`')
    parser.add_argument('--use-replay-log', default=False)
    parser.add_argument('--log-file-path')
    parser.add_argument('--debug', default=False, action='store_true')
    parser.add_argument('--server')
    parser.add_argument('--username')
    parser.add_argument('--password')

    args = parser.parse_args()
    main(args)
