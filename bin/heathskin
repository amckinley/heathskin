#!/usr/bin/env python

import threading
import Queue
import subprocess
import time
import argparse
import logging
import operator

# XXX: stupid hack to make piping of utf-8 stdout work correctly.
# this might break everything: http://stackoverflow.com/a/17628350
import sys
reload(sys)
sys.setdefaultencoding('UTF8')

from os.path import expanduser

from heathskin.game_state import GameState
from heathskin.deck import deck_from_file

my_log_path = "./game_log.txt"

class TailThread(threading.Thread):
    def __init__(self, hs_log_path, stop_flag, queue):
        threading.Thread.__init__(self)
        self.daemon = False

        self.logger = logging.getLogger()
        self.hs_log_path = hs_log_path
        self.queue = queue
        self.stop_flag = stop_flag

        self.process = None

    def run(self):
        self.logger.info("Starting log tailer at path %s", self.hs_log_path)
        self.process = subprocess.Popen(
            ["tail", "-f", self.hs_log_path], stdout=subprocess.PIPE)

        try:
            while True:
                if self.stop_flag.is_set():
                    self.shutdown()
                    return

                self.poll_for_output()

        except Exception, e:
            self.logger.exception(e)
            self.shutdown()

    def poll_for_output(self):
        line = self.process.stdout.readline()

        if len(line) > 3 and not line.startswith('('):
            self.queue.put(line)

    def shutdown(self):
        self.logger.info("Shutting down log tailer...")
        self.process.kill()
        self.process.wait()
        self.logger.info("Log tailer shutdown")

def run(args):
    log_fmt = "%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s"

    if args.debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logging.basicConfig(level=level, format=log_fmt)
    logger = logging.getLogger()

    my_log = open(my_log_path, "w")
    d = deck_from_file("data/decks/rage_mage.deck")
    gs = GameState(friendly_deck=d, friendly_user_name="austin")

    def shutdown():
        stopper.set()
        t.join()

    try:
        if args.use_replay_log:
            logger.info("Starting data reply from %s", args.use_replay_log)
            fake_lines = open(args.use_replay_log)
            for l in fake_lines.readlines():
                if l.rstrip() and not l.startswith('#'):
                    gs.feed_line(l.rstrip())
            logger.info("Finished with fake data")
            return

        stopper = threading.Event()
        output_queue = Queue.Queue(maxsize=100) # buffer at most 100 lines
        t = TailThread(args.log_file_path, stopper, output_queue)
        t.start()

        while True:
            try:
                line = output_queue.get_nowait()
            except Queue.Empty:
                continue

            my_log.write(line)

            try:
                gs.feed_line(line.rstrip())
            except Exception, e:
                logger.exception("crashed while feeding line")

    except KeyboardInterrupt:
        logger.error("Got SIGINT, shutting down")
        shutdown()

def main(args):
    run(args)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Track some skins') # <- lol
    parser.add_argument('--use_replay_log', default=False)
    default_log_location = expanduser("~/Library/Logs/Unity/Player.log")
    parser.add_argument('--log_file_path', default=default_log_location)
    parser.add_argument('--debug', default=False, action='store_true')
    args = parser.parse_args()

    main(args)
