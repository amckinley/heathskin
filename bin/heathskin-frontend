#!/usr/bin/env python

import json
from datetime import datetime

from flask import Flask, render_template, session, request, \
    jsonify, abort
from flask.ext.sqlalchemy import SQLAlchemy
from flask.ext.security import Security, SQLAlchemyUserDatastore, \
    UserMixin, RoleMixin, login_required, auth_token_required
from flask.ext.login import current_user

import redis

# Create app
app = Flask(__name__)
app.config['DEBUG'] = True
app.config['SECRET_KEY'] = 'super-secret'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'
#app.config['SECURITY_TOKEN_AUTHENTICATION_HEADER'] = 'HeathSkin-Token'
app.config['SECURITY_REGISTERABLE'] = True
app.config['SECURITY_SEND_REGISTER_EMAIL'] = False

# XXX: hurr durr security is hard
app.config['WTF_CSRF_ENABLED'] = False

# Create database connection object
db = SQLAlchemy(app)

# Define models
roles_users = db.Table('roles_users',
        db.Column('user_id', db.Integer(), db.ForeignKey('user.id')),
        db.Column('role_id', db.Integer(), db.ForeignKey('role.id')))

class Role(db.Model, RoleMixin):
    id = db.Column(db.Integer(), primary_key=True)
    name = db.Column(db.String(80), unique=True)
    description = db.Column(db.String(255))

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(255), unique=True)
    password = db.Column(db.String(255))
    active = db.Column(db.Boolean())
    confirmed_at = db.Column(db.DateTime())
    roles = db.relationship('Role', secondary=roles_users,
                            backref=db.backref('users', lazy='dynamic'))

# Setup Flask-Security
user_datastore = SQLAlchemyUserDatastore(db, User, Role)
security = Security(app, user_datastore)


# Redis connection
redis_conn = redis.StrictRedis(host='localhost', port=6379, db=0)
REDIS_QUEUE_NAME = "log_queue"

@app.route('/upload_line', methods=['POST'])
@auth_token_required
def upload_line():
    if 'session_start_time' not in session:
        abort(400)

    data = {
        "user_id": current_user.get_id(),
        "session_start": session['session_start_time'],
        "log_line": request.get_json()["log_line"]}

    redis_conn.rpush(REDIS_QUEUE_NAME, json.dumps(data))
    return ''

@app.route('/start_session', methods=['POST'])
@auth_token_required
def start_session():
    session['session_start_time'] = datetime.now().replace(microsecond=0).isoformat()
    return ''

@app.route('/api/help', methods = ['GET'])
def help():
    """Print available functions."""
    func_list = {}
    for rule in app.url_map.iter_rules():
        if rule.endpoint != 'static':
            func_list[rule.rule] = app.view_functions[rule.endpoint].__doc__
    return jsonify(func_list)

if __name__ == '__main__':
    db.create_all()
    app.run(port=3000)


