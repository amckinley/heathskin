#!/usr/bin/env python

import argparse

# XXX: stupid hack to make piping of utf-8 stdout work correctly.
# this might break everything: http://stackoverflow.com/a/17628350
import sys
reload(sys)
sys.setdefaultencoding('UTF8')

import logging
from logging import StreamHandler, Formatter

from heathskin.frontend import app

# XXX: might need to disable in prod, but this turns on HTTP keep-alive,
# which is crucial for making the log streaming work
from werkzeug.serving import WSGIRequestHandler
WSGIRequestHandler.protocol_version = "HTTP/1.1"


def main(args):
    log_fmt = "%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s"

    if args.debug:
        level = logging.DEBUG

    else:
        level = logging.INFO

    logging.basicConfig(level=level, format=log_fmt)

    # port configuration
    port = 3000
    if args.port_offset:
        port += int(args.port_offset)

    bind_addr = args.bind_addr

    # make flask app's logger integrate with our logger, and stop its other
    # logging
    handler = StreamHandler()
    handler.setLevel(logging.INFO)
    FORMAT_STRING = "{pid=%(process)d} %(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s"  # noqa
    fmtr = Formatter(fmt=FORMAT_STRING)
    handler.setFormatter(fmtr)

    # kill the other handlers and only use ours
    app.logger.handlers = []
    app.logger.addHandler(handler)

    # SHUT THE FUCK UP
    werkzeug_log = logging.getLogger('werkzeug')
    werkzeug_log.setLevel(logging.ERROR)

    # initial logger
    logger = logging.getLogger()

    try:
        logger.info("Starting server on %s:%s...", bind_addr, port)

        if args.profile:
            logger.info("Starting profiler run")

            import cProfile
            import pstats
            pr = cProfile.Profile()
            pr.enable()
            logger.info("All done")

        app.run(port=port, host=bind_addr, threaded=True)

    finally:
        logger.error("Shutting down")
        if args.profile:
            logger.info("Stopping profiler")
            pr.disable()
            profile_output = open('profile_results.txt', 'w')
            sortby = 'cumulative'
            ps = pstats.Stats(pr, stream=profile_output).sort_stats(sortby)
            ps.print_stats()
            logger.info("Profiler complete")
            return 0

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Frontend some skinz')
    parser.add_argument('--port-offset')
    parser.add_argument('--debug', action='store_true')
    parser.add_argument('--bind-addr', default="127.0.0.1",
        help="IP address to bind the server to")
    parser.add_argument('--profile', action='store_true')
    args = parser.parse_args()
    sys.exit(main(args))
